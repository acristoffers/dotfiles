#!/usr/bin/env fish
# The MIT License (MIT)
#
# Copyright (c) 2020 Álan Crístoffer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

function should_convert -a from to type
    mkdir -p (dirname $to)
    if test -e $to
        echo "Skipping $from"
        return 1
    end
    switch (file -b --mime-type $from)
        case $type'/*'
            return 0
        case '*'
            echo "Copying $from"
            cp $from $to
            return 1
    end
end

function convert_h264 -a from to
    if should_convert $from $to 'video'
        echo "Converting $from -> $to"
        # mencoder $from -o $to -oac faac -faacopts br=160:mpeg=4:object=2:raw -channels 2 -srate 48000 -ovc x264 -x264encopts subq=6:threads=auto:partitions=all:8x8dct:me=umh:frameref=5:bframes=3:b_pyramid=normal:weight_b -of lavf -lavfopts format=mp4
        mencoder $from -o $to -oac lavc -lavcopts acodec=aac:abitrate=128 -channels 2 -srate 48000 -ovc x264 -x264encopts subq=6:threads=auto:partitions=all:8x8dct:me=umh:frameref=5:bframes=3:b_pyramid=normal:weight_b -of lavf -lavfopts format=mp4
    end
end

function convert_h264s -a from to
    if should_convert $from $to 'video'
        echo "Converting $from -> $to"
        ffmpeg -i $from -c:v libx264 -qp 0 -c:a aac -strict experimental -b:a 240k $to
        # &> /dev/null
    end
end

function convert_copy -a from to
    if should_convert $from $to 'video'
        echo "Converting $from -> $to"
        ffmpeg -i $from $to -acodec copy -vcodec copy &>/dev/null
    end
end

function convert_h265 -a from to
    if should_convert $from $to 'video'
        echo "Converting $from -> $to"
        ffmpeg -i $from -c:v libx265 -preset veryslow -qp 0 -c:a aac -strict experimental -b:a 240k $to &>/dev/null
    end
end

function convert_mp3 -a from to
    if should_convert $from $to 'audio'
        echo "Converting $from -> $to"
        ffmpeg -i $from $to -c:v mjpeg -c:a libfdk_aac -ab #{b}k -threads 0 &>/dev/null
    end
end

function convert_jpg -a from to
    if should_convert $from $to 'image'
        echo "Converting $from -> $to"
        convert -resize 1920x1080\> $from $to
    end
end

function recurse -a from to codec bitrate
    echo "From: $from"
    echo "To: $to"
    echo "Codec: $codec"
    test -r "$bitrate" && echo "Bitrate: $bitrate"
    echo
    for file_from in (find $from -type f)
        set file_to (string replace $from $to $file_from)
        set file_to (string split -r -m1 . $file_to)[1]
        switch $codec
            case h264
                set file_to "$file_to.mp4"
                convert_h264 $file_from $file_to
            case h264s
                set file_to "$file_to.mp4"
                convert_h264s $file_from $file_to
            case mp3
                set file_to "$file_to.mp3"
                convert_mp3 $file_from $file_to
            case copy
                set file_to "$file_to.mp4"
                convert_copy $file_from $file_to
            case jpg
                set file_to "$file_to.jpg"
                convert_jpg $file_from $file_to
            case '*'
                set file_to "$file_to.mp4"
                echo h265
        end
    end
end

set from $argv[1]
set to $argv[2]
set codec $argv[3]
set bitrate $argv[4]

if test -z $from || test -z $to
    echo 'Usage:'
    echo -e "\t"(basename (status -f))' from to [codec] [bitrate]'
    echo -e 'Where:'
    echo -e "\tfrom : the directory containing the source videos."
    echo -e "\tto   : the directory where the converted videos will be placed."
    echo -e "\tcodec: can be h264, h265, copy, mp3 and jpg. Default is h265."
    echo -e "\tbitrate: only if codec is mp3. Defines the output bitrate (in kbps)."
    exit 1
end

switch $codec
    case h264
        set codec h264
    case h264s
        set codec h264s
    case mp3
        set codec mp3
    case copy
        set codec copy
    case jpg
        set codec jpg
    case '*'
        set codec h265
end

if [ $bitrate = '']
    set bitrate 256
end

mkdir -p $to
recurse $from $to $codec $bitrate
