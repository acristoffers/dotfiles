#!/usr/bin/env python3

import pwd
import grp
import os
import sys
import subprocess

if '--help' in sys.argv or len(sys.argv) != 5:
    print('arguments: user group umode path')
    exit(0)

user = sys.argv[1]
group = sys.argv[2]
umode = sys.argv[3]
path = sys.argv[4]

uid = pwd.getpwnam(user).pw_uid
gid = grp.getgrnam(group).gr_gid

chmod = os.chmod
chown = os.chown
stats = os.stat
join = os.path.join
Popen = subprocess.Popen
PIPE = subprocess.PIPE


def mode(st):
    return oct(st.st_mode)[-3:]


def set_executable(mode, unset=False):
    if not unset:
        owner = int(mode[-3]) | 1
        group = int(mode[-2]) | 1
        other = int(mode[-1]) | 1
        owner = owner if owner & 4 else owner & 2
        group = group if group & 4 else group & 2
        other = other if other & 4 else other & 2
        return str(owner) + str(group) + str(other)
    else:
        return str(int(mode[-3]) & 6) + str(int(mode[-2]) & 6) + str(int(mode[-1]) & 6)


def is_executable(path):
    mime = Popen(f'file "{path}"', shell=True, stdout=PIPE).stdout.read()
    try:
        mime = mime.decode('utf-8')
    except Exception as e:
        mime = mime.decode('latin-1')
    return 'executable' in mime


def set_permission(root, dirs, files):
    for name in files:
        try:
            path = join(root, name)
            st = stats(path)
            unset = not is_executable(path)
            fmode = mode(st)
            nmode = set_executable(umode, unset)
            if nmode != fmode:
                chmod(path, int(nmode, 8), follow_symlinks=False)
            if st.st_uid != uid or st.st_gid != gid:
                chown(path, uid, gid, follow_symlinks=False)
        except Exception as e:
            print(f'Error processing {path}')
            print(e)
    for name in dirs:
        try:
            path = join(root, name)
            st = stats(path)
            fmode = mode(st)
            nmode = set_executable(umode)
            if fmode != nmode:
                chmod(path, int(nmode, 8), follow_symlinks=False)
            if st.st_uid != uid or st.st_gid != gid:
                chown(path, uid, gid, follow_symlinks=False)
        except Exception as e:
            print(f'Error processing {path}')
            print(e)


for root, dirs, files in os.walk(path):
    set_permission(root, dirs, files)
